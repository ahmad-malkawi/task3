import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the minimumNumber function below.
    static int minimumNumber(int n, String password) {
        // Return the minimum number of characters to make the password strong
        boolean upperFlag = true;
        boolean lowerFlag = true;
        boolean digitFlag = true;
        boolean sympolFlag = true;
        int missed = 4 ;
        for(int i = 0;i<n;i++){
            if (Character.isUpperCase(password.charAt(i)) && upperFlag){
                upperFlag = false;
                missed--;
            } else if (Character.isLowerCase(password.charAt(i)) && lowerFlag){
                lowerFlag = false;
                missed--;
            }else if (Character.isDigit(password.charAt(i)) && digitFlag){
                digitFlag = false;
                missed--;
            }else if (!Character.isLetter(password.charAt(i)) && !Character.isDigit(password.charAt(i)) && sympolFlag){
                sympolFlag = false;
                missed--;
            }
        }
        return Math.max (missed,(6-n));
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String password = scanner.nextLine();

        int answer = minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}